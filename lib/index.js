'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _deltaframe = _interopRequireDefault(require("deltaframe"));

var _button = _interopRequireDefault(require("./button/button"));

var _Mousebind = _interopRequireDefault(require("./button/Mousebind"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * TODO
 */
var Mousehawk =
/*#__PURE__*/
function () {
  /**
   * A reference to the options for this instance of Mousehawk.
   * 
   * @property {Options}
   */

  /**
   * A list of mouse buttons that can be used to create mousebinds.
   * 
   * @property {MOUSE}
   * 
   * @private
   */

  /**
   * A list of the created mousebinds.
   * 
   * @property {Array<Mousebind>}
   * 
   * @private
   * 
   * @default []
   */

  /**
   * Keeps track of what mouse buttons have been pressed.
   * 
   * @property {Object}
   * 
   * @private
   */

  /**
   * Indicates whether using mousebinds are currently disabled or not.
   * 
   * @property {boolean}
   * 
   * @private
   * 
   * @default false
   */

  /**
   * The amount of time that mousebinds are disabled for if any.
   * 
   * @property {number}
   * 
   * @private
   * 
   * @default 0
   */

  /**
   * A reference to the Deltaframe game loop.
   * 
   * @property {Deltaframe}
   * 
   * @private
   */
  function Mousehawk() {
    _classCallCheck(this, Mousehawk);

    _defineProperty(this, "_options", void 0);

    _defineProperty(this, "_BUTTON", _button["default"]);

    _defineProperty(this, "_mousebinds", []);

    _defineProperty(this, "_pressed", {});

    _defineProperty(this, "_disabled", false);

    _defineProperty(this, "_disabledTime", 0);

    _defineProperty(this, "_loop", new _deltaframe["default"]());

    this._boot();
  }
  /**
   * Gets the mouse buttons that can be used to create mousebinds.
   * 
   * @returns {*}
   */


  _createClass(Mousehawk, [{
    key: "_boot",

    /**
     * Setup the mousedown and mouseup event listeners and also initialize Deltaframe if its being used.
     * 
     * @private
     */
    value: function _boot() {
      var _this = this;

      window.addEventListener('mousedown', function (ev) {
        return _this._onmousedown(ev);
      });
      window.addEventListener('mouseup', function (ev) {
        return _this._onmouseup(ev);
      });

      this._loop.start(function (time) {
        return _this.check(time);
      });
    }
    /**
     * When a mouse button is pressed, add it to the `pressed` object if it doesn't already exist and set it to `true`.
     * 
     * @private
     * 
     * @param {MouseEvent} ev The MouseEvent generated by the mouse button press.
     */

  }, {
    key: "_onmousedown",
    value: function _onmousedown(ev) {
      this._pressed[ev.buttons] = true;
      ev.preventDefault();
    }
    /**
     * When a mouse button is released, set its property in the `pressed` object to `false`.
     * 
     * @private
     * 
     * @param {MouseEvent} ev The MouseEvent generated by the mouse button press.
     */

  }, {
    key: "_onmouseup",
    value: function _onmouseup(ev) {
      this._pressed[ev.buttons] = false;
      ev.preventDefault();
    }
    /**
     * Creates a new mousebind for the specified mouse button.
     * 
     * @param {MousebindObject} mouseButton One or more mouse buttons from the `BUTTONS` property to attach to this mousebind.
     * 
     * @returns {Mousebind} Returns the newly created mousebind.
     */

  }, {
    key: "mousebind",
    value: function mousebind(mouseButton) {
      if (!mouseButton) {
        console.warn('A mouse button must be provided to create a mousebind');
        return;
      }

      var mouseObj = {};
      var mousebind = new _Mousebind["default"](mouseButton);

      this._mousebinds.push(mousebind);

      return mousebind;
    }
    /**
     * Checks to see which mouse button conditions are currently being met and runs the mousebinds's attached callback method.
      * 
      * @param {number} time The current timestamp which is used to check for delays and is passed to the mousebinds's callback method.
     */

  }, {
    key: "check",
    value: function check(time) {
      var _this2 = this;

      this._mousebinds.map(function (bind) {
        var button = bind.button.toString();
        var isActive = _this2._pressed[button];
        var isPastInitialDelay = time > bind._initialDelay;
        var isTime = time - bind.lastUsed > bind._delay;

        if (_this2._disabled) {
          if (time < time + _this2._disabledTime) return;else _this2.enable();
        }

        if (isActive && isPastInitialDelay && isTime && bind.action) bind.run(time);
      });
    }
    /**
     * Disables the use of all mousebinds until enable is called or until the wait time has expired if it is provided.
     * 
     * @param {number} [lengthOfTime=Infinity] An optional amount of time to wait until mousebinds are automatically enabled again. 
     */

  }, {
    key: "disable",
    value: function disable() {
      var lengthOfTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
      this._disabled = true;
      this._disabledTime = lengthOfTime;
    }
    /**
     * If no end time is passed when calling the `disable` method, this method has to be called to enable the use of
     * mousebind again.
     */

  }, {
    key: "enable",
    value: function enable() {
      this._disabled = false;
      this._disabledTime = 0;
    }
  }, {
    key: "BUTTON",
    get: function get() {
      return this._BUTTON;
    }
  }]);

  return Mousehawk;
}();

exports["default"] = Mousehawk;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,